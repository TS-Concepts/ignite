TECH UTILIZADAS

- REACT
- TAILWIND CSS
- APOLLO
- GRAPHQL
- GRAPHCMS

body {
    /*@apply - aplica classes, conceito do post css*/
    @apply bg-zinc-900 text-zinc-100;
  }
  
 
GraphCMS para criar o admin, pois ele é Headless e libera os endpoints para consumirmos com o react já o WP não é Headless
Headless CMS: Painel de ADMIN (dados fornecidos através de uma API REST ou GraphQL)
  
   query - buscar dados
   mutation - criar, alterar, ou deleta dados na API
  
  
o uso do graphql ajuda para:
overfatching  - quando o backend retorna muito mais informações pro front nem necessidade.
underfatching - quando o backend não retorna todas as info para o front


- para chamar a api do graphcms utiliza-se o apolo.

OBS: NÃO se utiliza fetch, xmlhttprequest, axios ou outro para fazer requisições pq a query ficaria estranha.
ex:

function App() {
  useEffect(() => {
    fetch('https://api-sa-east-1.graphcms.com/v2/cl4orrxnk0ti401ywet526fd4/master', {
      method: 'POST',
      body: `query {

      }`
    })

  }

}

note que dentro do body ficaria esquisito e mais complexo, não teria sintaxe highlight.

O uso do Apollo fica melhor pois traz mais recursos como:
- controle de cache 
  ex: se tiver 2 requisições iguais na API, o APOLO identifica que já foi realizada uma requisição antes então retorna os mesmos dados  
  para não repetir a mesma requisição.



 gql - permite escrever query ou mutation do graphql tendo a sintaxe hightlight. fica melhor a leitura

 useQuery - hook do react para adicionar um comportamento ao um componente. geralemnte um hook começa com o pre-fixo use..


EXEMPLO PARA CONSUMIR UMA API EXTERNA COM REACT + GRAPHQL



import { gql, useQuery } from "@apollo/client"
import { useEffect } from "react"


const GET_LESSONS_QUERY = gql`
  query {
    lessons {
      id
      title
    }
  }
`
// tipando o objeto lesson
interface Lesson {
  id: string;
  title: string;
}

// dentro do data tem o objeto lesson em seguida o array de lesson
// <{ lessons: Lesson[] }>
function App() {

  const { data } = useQuery<{ lessons: Lesson[] }>(GET_LESSONS_QUERY)

  // caso a entidade lesson da query não exista o data vai retornar undefined ai vai dar erro, então é preciso adicionar o ?
  return (
    <ul>
      {data?.lessons.map(lesson => {
        return <li key={lesson.id}>{lesson.title}</li>
      })}
    </ul>
  )
   
}
export default App


-------------------------------------------------------------------
UTILIZANDO SVG NO REACT 

Utiliza esse site para converter o codigo svg em um componente 
https://svg2jsx.com/

Utilizando icones
phosphoricons.com


https://evento.rocketseat.com.br/ignite-lab/episodios/react/aula-2/edicao/1
50:00  min